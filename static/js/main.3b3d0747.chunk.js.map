{"version":3,"sources":["components/Form.js","components/Booking.js","components/Bookings.js","App.js","reportWebVitals.js","index.js"],"names":["AddBooking","addBooking","useState","name","setName","email","setEmail","Date","date","setDate","time","setTime","onSubmit","e","preventDefault","formatedDate","moment","format","formatedTime","className","htmlFor","id","type","placeholder","value","onChange","target","required","selected","d","showMonthDropdown","showYearDropdown","dropdownMode","t","showTimeSelect","showTimeSelectOnly","timeIntervals","timeCaption","dateFormat","Booking","booking","onDelete","onClick","Bookings","bookings","slice","reverse","map","App","setBookings","useEffect","a","fetch","res","json","data","getBookings","method","headers","body","JSON","stringify","status","alert","filter","Form","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b3d0747.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport DatePicker from \"react-datepicker\";\nimport moment from 'moment';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst AddBooking = ({addBooking}) => {\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [date, setDate] = useState(new Date()); \n    const [time, setTime] = useState(new Date()); \n\n    const onSubmit = (e) => {\n        e.preventDefault();\n\n        //Format for sql \n        let formatedDate = moment(date).format('YYYY-MM-DD');\n        let formatedTime = moment(time).format('HH:mm');\n\n        addBooking ({name, email, formatedDate, formatedTime})\n\n        //clear form\n        setName(\"\");\n        setEmail(\"\");\n        setDate(new Date());\n        setTime(new Date());\n    }\n\n    return (\n        <form onSubmit={onSubmit}>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <label className=\"form-label\" htmlFor = \"name\">Full Name</label>\n                    <input id='name' type='text' className='form-control' placeholder='Full Name' value={name} onChange={(e) => setName(e.target.value)} required></input>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <label className=\"form-label\" htmlFor=\"email\">Email</label>\n                    <input type = 'email' id = \"email\" className='form-control' placeholder='Email' value={email} onChange={(e) => setEmail(e.target.value)} required></input>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <label className=\"form-label\" htmlFor = \"date\">Date</label>\n                    <div> \n                    <DatePicker id='date'  className='form-control' selected={date} onChange={d => setDate(d)} \n                    showMonthDropdown\n                    showYearDropdown\n                    dropdownMode=\"select\"\n                    required/>\n                    </div>\n                </div>\n                <div className=\"\">\n                    <div className=\"time\"> \n                    <label htmlFor = 'time' className=\"form-label\">Time</label>\n                    <DatePicker\n                    className='form-control'\n                    id='time'\n                    selected={time}\n                    onChange={t => setTime(t)}\n                    showTimeSelect\n                    showTimeSelectOnly\n                    timeIntervals={10}\n                    timeCaption=\"Time\"\n                    dateFormat=\"h:mm aa\"\n                    required\n                    />\n                    </div>\n                </div>\n            </div>\n            <input type='submit' value='Add Booking' className='btn btn-block' />\n        </form> \n    );\n}\n\nexport default AddBooking","import moment from 'moment';\nconst Booking = ({ booking, onDelete }) => {\n  return (\n    <div className='booking'>\n      <div>\n        <div>\n          {booking.name}\n        </div>\n        <div>\n          {booking.email}\n        </div>\n        <div>\n          {moment(booking.date).format('DD/MM/YYYY')}\n          {\"--\"}\n          {booking.time}\n        </div>\n      </div>\n      <button className=\"dlt-btn\" value='Delete' onClick={() => onDelete(booking.id)}>Delete</button>\n    </div>\n\n\n  )\n}\n\nexport default Booking","import Booking from './Booking'\n\nconst Bookings = ({ bookings, onDelete}) => {\n  return (\n    // map from newest to oldest\n    <div className=\"booking-list\">\n      {bookings.slice(0).reverse().map((booking) => (\n        <Booking key={booking.id} booking={booking} onDelete = {onDelete}/>\n      ))}\n    </div>\n    \n  )\n}\n\nexport default Bookings","import { useEffect,useState } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport Bookings from './components/Bookings';\n\nfunction App() {\n  //state of bookings\n  const [bookings, setBookings] = useState([])\n  \n  //get bookings from database on load\n  useEffect(() => {\n    const getBookings = async () =>{\n    const res = await fetch('http://localhost:8080/')\n    const data = await res.json() \n    setBookings(data);\n  }\n  getBookings();\n  }, [])\n\n  //add a booking to database\n  const addBooking = async(booking) => {\n    const res = await fetch('http://localhost:8080/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(booking)\n    })\n    \n    if (res.status === 201){\n      //add new booking to state\n      const data = await res.json()\n      setBookings([...bookings, data[0]])\n    } else{\n      alert('Error Adding Booking')\n    }\n  }\n\n  //Delete booking\n  const onDelete = async (id) => {\n    const res = await fetch(`http://localhost:8080/${id}`, {\n      method: 'DELETE',\n    })\n      if (res.status === 200){\n        //Kepp all bookings except the one removed\n        setBookings(bookings.filter((booking) => booking.id !== id))\n      } else{\n        alert('Error Deleting Booking')\n      }\n  }\n\n  return (\n    <div className=\"container\">\n      <h2>Booking Form</h2>\n      <Form className=\"form\" addBooking = {addBooking}/>\n      <Bookings bookings={bookings} onDelete={onDelete}/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}